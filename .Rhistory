ypred_test = predict(ad_fit,test)
ad_fit = boosting(X0 ~.,train, boos=TRUE, mfinal=30)
ad_fit = boosting(V24 ~., train, boos=TRUE, mfinal=30)
ad_fit = boosting(V24 ~., train, boos=TRUE, mfinal=30)
ypred_test = predict(ad_fit,test)
ypred_train = predict(ad_fit,train)
ad_conf=table(ypred_test$class,y_test)
ad_conft=table(ypred_train$class,y_train)
(ad_wtr=1-sum(diag(ad_conft))/length(y_train))
(ad_wte=1-sum(diag(ad_conf))/length(y_test))
ad_conf
ypred_testp = data.frame(predict(rf_fit,x_test,type="prob"))
ypred_testc = cbind(y_test,ypred_testp)
library(ROCR)
pred = prediction(ypred_testc$X1,ypred_testc$y_test)
roc = performance(pred, "tpr","fpr")
plot(roc,colorize=T)
library(stats)
lg_fit = glm(X0~., data=train,family=binomial)
lg_fit = glm(V24~., data=train,family=binomial)
ypred_test = predict(lg_fit,x_test,type="response")
ypred_train = predict(lg_fit,x_train,type="response")
lg_conft=table(ypred_train,y_train)
lg_conf=table(ypred_test,y_test)
(lg_wtr=1-sum(diag(lg_conft))/length(y_train))
(lg_wte=1-sum(diag(lg_conf))/length(y_test))
library(glmnet)
co=cor(x_train)
co
a=0.75
glmnet_cv=cv.glmnet(as.matrix(x_train),y_train,family="binomial",alpha=a)
##deep learning
```{r keras}
library(keras)#Create Training and Testing sets
set.seed(1605)
x_tr = data[i,-c(2,20)]
y_tr = data[i,2]
x_tr = model.matrix(~.,data=x_tr)[,-1]
x_tr = apply(x_tr,2,function(x) (xmin(
x))/(max(x)-min(x)))
n= nrow(x_tr)
itr= sample(n,0.75*n,rep=F)
x_tt = x_tr[-itr,]
y_tt = y_tr[-itr]
x_tr = x_tr[itr,]
y_tr = y_tr[itr]
library(keras)#Create Training and Testing sets
set.seed(1605)
x_tr = data[i,-c(2,20)]
data
data[i,-c(2,20)]
install.packages("Rtools")
library(reticulate)
library(keras)
library(tensorflow)
d = keras::dataset_cifar10()
install_tensorflow()
shiny::runApp('Desktop/My publication/Catnip/ONLINE SHINY/CatnipQC')
shiny::runApp()
setwd("/Users/Boyuan/Desktop/My publication/Catnip/ONLINE SHINY/CatnipQC_ShinyApp")
getwd()
rmarkdown::render_site()
d.summary
library(readxl)
library(rebus)
library(RColorBrewer)
library(tidyverse)
library(ggcorrplot)
library(ggExtra)
set.seed(2020)
theme_set(theme_bw() +
theme(strip.background = element_blank(),
strip.text = element_text(face = "bold", colour = "black", size = 13),
axis.text = element_text(colour = "black", size = 10),
title = element_text(face = "bold"))
)
path = "/Users/Boyuan/Desktop/My publication/Catnip/Quantification/catnip Quant December 2019.xlsx"
d = read_excel(path, sheet = "Dec11_2019_tidy")
compounds = c("NA", "NT", "DNHL", "NL")
d.summary = d %>% group_by(Groups) %>%
gather(contains("NA"), contains("NT"), contains("DHNL"), contains("NL"), contains("total"),
key = compounds, value = content) %>%
group_by(Groups, compounds) %>%
summarise(content.mean = mean(content),
content.sd = sd(content))
d.summary
# Overal visualization of indivisual compounds
# d.summary %>%
#   filter(!compounds %>% str_detect("total")) %>%
#   ggplot(aes(x = Groups, y = content.mean, fill = Groups)) +
#   geom_bar(stat = "identity", alpha = .7, width = .9) +
#   geom_errorbar(aes(ymin = content.mean - content.sd,
#                     ymax = content.mean + content.sd,
#                     color = Groups),
#                 width = 0.5) +
#   facet_wrap(~compounds, scales = "free_x") +
#   coord_flip() +
#   theme(legend.position = "None")
func.plt.contentBar = function(myDataset, eachCmpd = T, FlipPlot = T,
barPosition = "dodge" , barColor = 1) {
dataset = myDataset
if(barPosition %in% c("stack", "fill")) {
# do not stack the final total content for stacked bars
# either stack subtotal of individual compounds depend on argument "eachCmpd"
dataset = dataset %>% filter(compounds != "total")
}
# -----
if(eachCmpd == T) { # plot individual compounds
dataset = dataset %>% filter(!compounds %>% str_detect("total"))
} else{ # plot subtotal of each category of compounds
dataset = dataset %>% filter(compounds %>% str_detect("total"))
}
# -----
# basc plot
plt = dataset %>%
ggplot(aes(x = Groups, y = content.mean)) +
labs(title = "Compounds content in catnip (mg/100 g dry weight)")
# Barplot position
if (barPosition == "dodge") { # add error bar
plt = plt +
geom_bar(stat = "identity", aes(fill = Groups), # when dodged, color with groups
alpha = .7, width = .9) +
geom_errorbar(aes(ymin = content.mean - content.sd,
ymax = content.mean + content.sd,
color = Groups),
width = 0.5) +
theme(legend.position = "None")  # no legend for groups annotation
} else if (barPosition == "stack") {
plt = plt +
geom_bar(stat = "identity", aes(fill = compounds), # when stack or filled, color with compounds
position = "stack", alpha = .9, width = .9)
} else if (barPosition == "fill") {
plt = plt +
geom_bar(stat = "identity", aes(fill = compounds),
position = "fill", alpha = .9, width = .9)
}
# ---
# flip plot?
if(FlipPlot == T) {
plt = plt + coord_flip()
if (barPosition == "dodge") { # if fill or stack, no need to facet regarding compounds
plt = plt + facet_wrap(~compounds, scales = "free_x")
# group axis vertical, free the content x-axis }
}
} else { # no flip, i.e., group on the horizontal axis
plt = plt +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
if (barPosition == "dodge") { # if fill or stack, no need to facet regarding compounds
plt = plt + facet_wrap(~compounds, scales = "free_y")
# group axis horizontal, free content y-axis
}
}
# bar color specification
colorSet = c("Accent", "Dark2", "Paired", "Pastel1", "Pastel2", "Set1", "Set2", "Set3",
"Greys", "Blues", "Greens")
max.colorSet = c(8, 8, 12, 9, 8, 9, 8, 12, rep(9, 3))
names(max.colorSet) = colorSet # maximum color choice number within each color palette set
# Color by compounds
if(barPosition %in% c("stack", "fill") & barColor != 1) {
n.cmpds = dataset$compounds %>% n_distinct()
if(n.cmpds > max.colorSet[barColor]) {
color.cmpds = colorRampPalette(brewer.pal(max.colorSet[barColor], barColor))(n.cmpds)
plt = plt + scale_color_manual(values = color.cmpds) +
scale_fill_manual(values = color.cmpds)
} else {
plt = plt + scale_color_brewer(palette = barColor) + scale_fill_brewer(palette = barColor)
}
}
# Color by groups
if(barPosition == "dodge" & barColor != 1) {
n.groups = dataset$Groups %>% n_distinct() # group number
if(n.groups > max.colorSet[barColor]) { # more finely divided color steps
color.groups = colorRampPalette(brewer.pal(max.colorSet[barColor], barColor))(n.groups)
plt = plt + scale_color_manual(values = color.groups) +
scale_fill_manual(values = color.groups)
} else { plt = plt + scale_color_brewer(palette = barColor) + scale_fill_brewer(palette = barColor) }
}
return(plt)
}
# Individual compound
d.summary %>%
func.plt.contentBar(eachCmpd = F, FlipPlot = T, barPosition = "fill", barColor = "Set2")
# correlation plot
d.summary2 = d.summary %>%
filter(! compounds %>% str_detect("total")) %>%
select(Groups, compounds, content.mean)
d.summary2.spread = d.summary2 %>%
spread(key = compounds, value = content.mean)
mat.summary2 = d.summary2.spread %>%
ungroup() %>% select(-Groups) %>% as.matrix()
rownames(mat.summary2) = d.summary2.spread$Groups
mat.summary2 %>% cor() %>%
ggcorrplot(method = "square", title = "Compound correlation plot",
legend.title = "correlation", colors = c("Steelblue", "white", "firebrick"))
# Box plot
plt.box = d.summary2 %>%
ggplot(aes(x = compounds, y = content.mean, fill = compounds, color = compounds)) +
geom_boxplot(alpha = .2, outlier.alpha = 0) +
geom_point(position = position_jitter(.2), shape = 21, fill = "white") +
facet_wrap(~ compounds, scales = "free", nrow = 2) +
theme(legend.position = "none") +
labs(y = "Averaged content (mg/100g dry mass)",
title = "Compound content distribution boxplot")
plt.box
# Define boxplot function
func.plt.box = function(dataset){
plt = dataset %>%
ggplot(aes(x = 1, y = content.mean, fill = compounds, color = compounds)) +
geom_boxplot(alpha = .2, outlier.alpha = 0) +
geom_point(position = position_jitter(.2), shape = 21, fill = "white") +
facet_wrap(~ compounds, scales = "free_y", nrow = 1) +
theme(legend.position = "none",
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank()) +
labs(y = "Averaged content (mg/100g dry mass)",
title = "Compound content distribution boxplot")
return(plt)
}
d.summary.cmpdSelected %>% func.plt.box()
d.summary2 %>%
ggplot(aes(x = content.mean, fill = compounds, color = compounds)) +
geom_histogram(alpha = .2) + geom_rug(alpha = .5) +
facet_wrap(~ compounds, scales = "free", nrow = 2) +
theme(legend.position = "none") +
labs(x = "Averaged content (mg/100g dry mass)",
title = "Compound content distribution histogram")
d.summary
d.summary
d.summary %>%
filter(!compounds %>% str_detect("total"))
d
d$Groups
d
d$Groups
d$Groups %>% factor(ordered = T)
d$Groups
d$Groups %>% factor(ordered = T)
library(readxl)
library(rebus)
library(RColorBrewer)
library(tidyverse)
library(ggcorrplot)
library(ggExtra)
set.seed(2020)
theme_set(theme_bw() +
theme(strip.background = element_blank(),
strip.text = element_text(face = "bold", colour = "black", size = 13),
axis.text = element_text(colour = "black", size = 10),
title = element_text(face = "bold"))
)
path = "/Users/Boyuan/Desktop/My publication/Catnip/Quantification/catnip Quant December 2019.xlsx"
d = read_excel(path, sheet = "Dec11_2019_tidy")
d$Groups = d$Groups %>% factor(ordered = T)
compounds = c("NA", "NT", "DNHL", "NL")
d.summary = d %>% group_by(Groups) %>%
gather(contains("NA"), contains("NT"), contains("DHNL"), contains("NL"), contains("total"),
key = compounds, value = content) %>%
group_by(Groups, compounds) %>%
summarise(content.mean = mean(content),
content.sd = sd(content))
d.summary
# Overal visualization of indivisual compounds
# d.summary %>%
#   filter(!compounds %>% str_detect("total")) %>%
#   ggplot(aes(x = Groups, y = content.mean, fill = Groups)) +
#   geom_bar(stat = "identity", alpha = .7, width = .9) +
#   geom_errorbar(aes(ymin = content.mean - content.sd,
#                     ymax = content.mean + content.sd,
#                     color = Groups),
#                 width = 0.5) +
#   facet_wrap(~compounds, scales = "free_x") +
#   coord_flip() +
#   theme(legend.position = "None")
func.plt.contentBar = function(myDataset, eachCmpd = T, FlipPlot = T,
barPosition = "dodge" , barColor = 1) {
dataset = myDataset
if(barPosition %in% c("stack", "fill")) {
# do not stack the final total content for stacked bars
# either stack subtotal of individual compounds depend on argument "eachCmpd"
dataset = dataset %>% filter(compounds != "total")
}
# -----
if(eachCmpd == T) { # plot individual compounds
dataset = dataset %>% filter(!compounds %>% str_detect("total"))
} else{ # plot subtotal of each category of compounds
dataset = dataset %>% filter(compounds %>% str_detect("total"))
}
# -----
# basc plot
plt = dataset %>%
ggplot(aes(x = Groups, y = content.mean)) +
labs(title = "Compounds content in catnip (mg/100 g dry weight)")
# Barplot position
if (barPosition == "dodge") { # add error bar
plt = plt +
geom_bar(stat = "identity", aes(fill = Groups), # when dodged, color with groups
alpha = .7, width = .9) +
geom_errorbar(aes(ymin = content.mean - content.sd,
ymax = content.mean + content.sd,
color = Groups),
width = 0.5) +
theme(legend.position = "None")  # no legend for groups annotation
} else if (barPosition == "stack") {
plt = plt +
geom_bar(stat = "identity", aes(fill = compounds), # when stack or filled, color with compounds
position = "stack", alpha = .9, width = .9)
} else if (barPosition == "fill") {
plt = plt +
geom_bar(stat = "identity", aes(fill = compounds),
position = "fill", alpha = .9, width = .9)
}
# ---
# flip plot?
if(FlipPlot == T) {
plt = plt + coord_flip()
if (barPosition == "dodge") { # if fill or stack, no need to facet regarding compounds
plt = plt + facet_wrap(~compounds, scales = "free_x")
# group axis vertical, free the content x-axis }
}
} else { # no flip, i.e., group on the horizontal axis
plt = plt +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
if (barPosition == "dodge") { # if fill or stack, no need to facet regarding compounds
plt = plt + facet_wrap(~compounds, scales = "free_y")
# group axis horizontal, free content y-axis
}
}
# bar color specification
colorSet = c("Accent", "Dark2", "Paired", "Pastel1", "Pastel2", "Set1", "Set2", "Set3",
"Greys", "Blues", "Greens")
max.colorSet = c(8, 8, 12, 9, 8, 9, 8, 12, rep(9, 3))
names(max.colorSet) = colorSet # maximum color choice number within each color palette set
# Color by compounds
if(barPosition %in% c("stack", "fill") & barColor != 1) {
n.cmpds = dataset$compounds %>% n_distinct()
if(n.cmpds > max.colorSet[barColor]) {
color.cmpds = colorRampPalette(brewer.pal(max.colorSet[barColor], barColor))(n.cmpds)
plt = plt + scale_color_manual(values = color.cmpds) +
scale_fill_manual(values = color.cmpds)
} else {
plt = plt + scale_color_brewer(palette = barColor) + scale_fill_brewer(palette = barColor)
}
}
# Color by groups
if(barPosition == "dodge" & barColor != 1) {
n.groups = dataset$Groups %>% n_distinct() # group number
if(n.groups > max.colorSet[barColor]) { # more finely divided color steps
color.groups = colorRampPalette(brewer.pal(max.colorSet[barColor], barColor))(n.groups)
plt = plt + scale_color_manual(values = color.groups) +
scale_fill_manual(values = color.groups)
} else { plt = plt + scale_color_brewer(palette = barColor) + scale_fill_brewer(palette = barColor) }
}
return(plt)
}
# Individual compound
d.summary %>%
func.plt.contentBar(eachCmpd = F, FlipPlot = T, barPosition = "fill", barColor = "Set2")
d.summary
d.summary$Groups
d$Groups
library(readxl)
library(rebus)
library(RColorBrewer)
library(tidyverse)
library(ggcorrplot)
library(ggExtra)
set.seed(2020)
theme_set(theme_bw() +
theme(strip.background = element_blank(),
strip.text = element_text(face = "bold", colour = "black", size = 13),
axis.text = element_text(colour = "black", size = 10),
title = element_text(face = "bold"))
)
path = "/Users/Boyuan/Desktop/My publication/Catnip/Quantification/catnip Quant December 2019.xlsx"
d = read_excel(path, sheet = "Dec11_2019_tidy")
#
d$Groups
d$Groups %>% duplicated()
d$Groups[d$Groups %>% duplicated()]
d$Groups %>% duplicated()
d$Groups[!d$Groups %>% duplicated()]
d$Groups[!d$Groups %>% duplicated()] %>% factor(ordered = T)
unique.groups = d$Groups[!d$Groups %>% duplicated()]
unique.groups = d$Groups[!d$Groups %>% duplicated()]
d$Groups = d$Groups %>% factor(levels = unique.groupsm, ordered = T)
unique.groups = d$Groups[!d$Groups %>% duplicated()]
d$Groups = d$Groups %>% factor(levels = unique.groups, ordered = T)
library(readxl)
library(rebus)
library(RColorBrewer)
library(tidyverse)
library(ggcorrplot)
library(ggExtra)
set.seed(2020)
theme_set(theme_bw() +
theme(strip.background = element_blank(),
strip.text = element_text(face = "bold", colour = "black", size = 13),
axis.text = element_text(colour = "black", size = 10),
title = element_text(face = "bold"))
)
path = "/Users/Boyuan/Desktop/My publication/Catnip/Quantification/catnip Quant December 2019.xlsx"
d = read_excel(path, sheet = "Dec11_2019_tidy")
# convert group as ordered factor, in original order
unique.groups = d$Groups[!d$Groups %>% duplicated()]
d$Groups = d$Groups %>% factor(levels = unique.groups, ordered = T)
compounds = c("NA", "NT", "DNHL", "NL")
d.summary = d %>% group_by(Groups) %>%
gather(contains("NA"), contains("NT"), contains("DHNL"), contains("NL"), contains("total"),
key = compounds, value = content) %>%
group_by(Groups, compounds) %>%
summarise(content.mean = mean(content),
content.sd = sd(content))
d.summary
# Overal visualization of indivisual compounds
# d.summary %>%
#   filter(!compounds %>% str_detect("total")) %>%
#   ggplot(aes(x = Groups, y = content.mean, fill = Groups)) +
#   geom_bar(stat = "identity", alpha = .7, width = .9) +
#   geom_errorbar(aes(ymin = content.mean - content.sd,
#                     ymax = content.mean + content.sd,
#                     color = Groups),
#                 width = 0.5) +
#   facet_wrap(~compounds, scales = "free_x") +
#   coord_flip() +
#   theme(legend.position = "None")
func.plt.contentBar = function(myDataset, eachCmpd = T, FlipPlot = T,
barPosition = "dodge" , barColor = 1) {
dataset = myDataset
if(barPosition %in% c("stack", "fill")) {
# do not stack the final total content for stacked bars
# either stack subtotal of individual compounds depend on argument "eachCmpd"
dataset = dataset %>% filter(compounds != "total")
}
# -----
if(eachCmpd == T) { # plot individual compounds
dataset = dataset %>% filter(!compounds %>% str_detect("total"))
} else{ # plot subtotal of each category of compounds
dataset = dataset %>% filter(compounds %>% str_detect("total"))
}
# -----
# basc plot
plt = dataset %>%
ggplot(aes(x = Groups, y = content.mean)) +
labs(title = "Compounds content in catnip (mg/100 g dry weight)")
# Barplot position
if (barPosition == "dodge") { # add error bar
plt = plt +
geom_bar(stat = "identity", aes(fill = Groups), # when dodged, color with groups
alpha = .7, width = .9) +
geom_errorbar(aes(ymin = content.mean - content.sd,
ymax = content.mean + content.sd,
color = Groups),
width = 0.5) +
theme(legend.position = "None")  # no legend for groups annotation
} else if (barPosition == "stack") {
plt = plt +
geom_bar(stat = "identity", aes(fill = compounds), # when stack or filled, color with compounds
position = "stack", alpha = .9, width = .9)
} else if (barPosition == "fill") {
plt = plt +
geom_bar(stat = "identity", aes(fill = compounds),
position = "fill", alpha = .9, width = .9)
}
# ---
# flip plot?
if(FlipPlot == T) {
plt = plt + coord_flip()
if (barPosition == "dodge") { # if fill or stack, no need to facet regarding compounds
plt = plt + facet_wrap(~compounds, scales = "free_x")
# group axis vertical, free the content x-axis }
}
} else { # no flip, i.e., group on the horizontal axis
plt = plt +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
if (barPosition == "dodge") { # if fill or stack, no need to facet regarding compounds
plt = plt + facet_wrap(~compounds, scales = "free_y")
# group axis horizontal, free content y-axis
}
}
# bar color specification
colorSet = c("Accent", "Dark2", "Paired", "Pastel1", "Pastel2", "Set1", "Set2", "Set3",
"Greys", "Blues", "Greens")
max.colorSet = c(8, 8, 12, 9, 8, 9, 8, 12, rep(9, 3))
names(max.colorSet) = colorSet # maximum color choice number within each color palette set
# Color by compounds
if(barPosition %in% c("stack", "fill") & barColor != 1) {
n.cmpds = dataset$compounds %>% n_distinct()
if(n.cmpds > max.colorSet[barColor]) {
color.cmpds = colorRampPalette(brewer.pal(max.colorSet[barColor], barColor))(n.cmpds)
plt = plt + scale_color_manual(values = color.cmpds) +
scale_fill_manual(values = color.cmpds)
} else {
plt = plt + scale_color_brewer(palette = barColor) + scale_fill_brewer(palette = barColor)
}
}
# Color by groups
if(barPosition == "dodge" & barColor != 1) {
n.groups = dataset$Groups %>% n_distinct() # group number
if(n.groups > max.colorSet[barColor]) { # more finely divided color steps
color.groups = colorRampPalette(brewer.pal(max.colorSet[barColor], barColor))(n.groups)
plt = plt + scale_color_manual(values = color.groups) +
scale_fill_manual(values = color.groups)
} else { plt = plt + scale_color_brewer(palette = barColor) + scale_fill_brewer(palette = barColor) }
}
return(plt)
}
# Individual compound
d.summary %>%
func.plt.contentBar(eachCmpd = F, FlipPlot = T, barPosition = "fill", barColor = "Set2")
runApp('~/Desktop/My publication/Catnip/ONLINE SHINY/CatnipQC')
runApp('~/Desktop/My publication/Catnip/ONLINE SHINY/CatnipQC')
